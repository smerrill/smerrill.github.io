<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: treehouse agency | Grenade Sandwich]]></title>
  <link href="http://smerrill.github.io/blog/categories/treehouse-agency/atom.xml" rel="self"/>
  <link href="http://smerrill.github.io/"/>
  <updated>2014-05-27T09:28:12-04:00</updated>
  <id>http://smerrill.github.io/</id>
  <author>
    <name><![CDATA[Steven W. Merrill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fuddled API, Verbose Workaround]]></title>
    <link href="http://smerrill.github.io/blog/steven/2010/01/09/fuddled-api-verbose-workaround/"/>
    <updated>2010-01-09T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/steven/2010/01/09/fuddled-api-verbose-workaround</id>
    <content type="html"><![CDATA[<p>I've started writing some <a href="http://scala-lang.org/">Scala</a> applications (including one atop the <a href="http://liftweb.net/">Lift web framework</a>) to access <a href="http://unfuddle.com/docs/api/">Unfuddle's API</a> recently. I've mainly been building daily burndown reports for my team at <a href="http://treehouseagency.com/">Treehouse Agency</a>.  I've run into a few issues with API methods not working as advertised, and Unfuddle's been pretty good about fixing most of them.</p>




<p>The problem <a href="http://unfuddle.com/community/forums/3/topics/816?page=1#posts-2306">I've been experiencing as of January 5th</a> is that Unfuddle has subtly broken authentication for client libraries that (wisely) wait for a 401 error with an accompanying WWW-Authenticate: Basic header before sending credentials.  (Namely, Unfuddle's API stopped sending a WWW-Authenticate header altogether.)  If need be, you can force most HTTP client libraries to send authentication on every request in one way or another, and that's what I had to do tonight with the excellent <a href="http://databinder.net/dispatch/About">Databinder Dispatch library</a>.</p>


<!--more-->


<p>The code to prepare a request that will send Basic credentials when the server requests them is concise:</p>


<p><div class="highlight"><pre><code class="scala"><span class="k">import</span> <span class="nn">dispatch._&lt;/p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="o">:/(&amp;</span><span class="n">ldquo</span><span class="o">;%</span><span class="n">s</span><span class="o">.</span><span class="n">unfuddle</span><span class="o">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">format</span> <span class="n">subdomain</span><span class="o">)</span> <span class="o">/</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">as</span> <span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
</code></pre></div></p>

<p>Clean and simple, right?</p>




<p>To force an outgoing HTTP basic auth header with the least fuss, you'll need to create it by hand by Base64 encoding a user's username and password pair.  The Apache Commons library includes a Base64 encoder and decoder, so by dipping your toes into Java-land you can construct this header.  Once the Base64 value is encoded, the <strong>&lt;:&lt;</strong> method of the <a href="http://databinder.net/sxr/dispatch-http/0.6.5/main/Http.scala.html#6742">dispatch.Request class</a> accepts a Map[String, String] and will set the corresponding headers on the outgoing web request.</p>




<p>Here's the full workaround I came up with.</p>


<p><div class="highlight"><pre><code class="scala"><span class="k">import</span> <span class="nn">dispatch._</span>
<span class="k">import</span> <span class="nn">org.apache.commons.codec.binary.Base64</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">authString</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Basic</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="n">encodeBase64</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;%</span><span class="n">s</span><span class="o">:%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">).</span><span class="n">getBytes</span><span class="o">))</span>
<span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="o">:/(&amp;</span><span class="n">ldquo</span><span class="o">;%</span><span class="n">s</span><span class="o">.</span><span class="n">unfuddle</span><span class="o">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">format</span> <span class="n">subdomain</span><span class="o">)</span> <span class="o">/</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="nc">Map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Authorization</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="n">authString</span><span class="o">)</span>
</code></pre></div></p>

<p>So there you have it - a method to construct a Databinder Dispatch web request that always sends an HTTP basic auth header. Hopefully, all the web APIs that you interact with will do the right thing regarding WWW-Authenticate headers, but if not, now you'll know how to cope.</p>




<p><strong>UPDATE:</strong> In case you're wondering if this is happening with an API that you're interacting with, the specific error that indicates that Apache HttpClient (the underlying workhorse of Databinder Dispatch) did not receive any WWW-Authenticate headers looks like this:</p>




<p><pre><code>WARN - Authentication error: Unable to respond to any of these challenges: {}</code></pre></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tree House Flips Out]]></title>
    <link href="http://smerrill.github.io/blog/steven/2009/01/24/tree-house-flips-out/"/>
    <updated>2009-01-24T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/steven/2009/01/24/tree-house-flips-out</id>
    <content type="html"><![CDATA[<!--more-->


<p><a href="http://www.flickr.com/photos/00sven/3222482109" title="Tree House Flips Out" class="flickr-photo-img"><img src="http://farm4.static.flickr.com/3075/3222482109_4af2247f2f.jpg" alt="Tree House Flips Out" title="Tree House Flips Out"  class=" flickr-photo-img" height="371" width="500" /></a></p>




<p>I work for <a href="http://treehouseagency.com/">Tree House Agency</a> here in NYC, and we gave out custom-printed flip minos (one per company)&nbsp;to our corporate partners as Christmas gifts.&nbsp;</p>


<p>Each of the employees also got one. Our CEO <a href="http://treehouseagency.com/users/michael-caccavano">Michael Caccavano</a> played Santa and left them in the NYC&nbsp;office for us to pick up this last Thursday, and I&nbsp;couldn't resist getting a shot of it with Photo Booth.</p>


<p>Gotta love it - yet another perk of working with Tree House.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Blogging]]></title>
    <link href="http://smerrill.github.io/blog/steven/2009/01/24/back-blogging/"/>
    <updated>2009-01-24T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/steven/2009/01/24/back-to-blogging</id>
    <content type="html"><![CDATA[<p>Welcome to the new (and completely empty) Grenade Sandwich. My name is Steven Merrill, a classical singer and technologist, and I'll be your host.</p>


<!--more-->


<p>The title of this site comes from a season finale of The Shield, and I&nbsp;think you'll understand what I'm talking about if you're a fan of the show.</p>




<p>This site will serve as a place where I&nbsp;can write about a number of different things other than my technical writings on Drupal, which I&nbsp;publish both at cascadingstyle.net and treehouseagency.com, and technology tips for classical singers, which will soon be up on a new web property.</p>


<div style="page-break-after: always;"><span style="display: none;">&nbsp;</span></div>




<p>One of my 2009 resolutions is to consume less (food, media, etc.) and produce more and this site'll be one part of that strategy.</p>




<p>Now for just a couple technical bits - the new site's running Drupal (of course.)&nbsp;It uses a custom theme I&nbsp;developed off of a CSS&nbsp;template that I&nbsp;got by subscribing to Templatica.com. Check it out - it's definitely worth the low yearly subscription cost of $24, especially since they've already added one additional template since I&nbsp;signed up.</p>




<p>There's all the other standard good Drupal bits in here, too - Mollom for spam prevention, Twitter module for showing you my tweets, Views, CCK, and a little Amazon integration which I'll use more heavily on my next project.</p>

]]></content>
  </entry>
  
</feed>
