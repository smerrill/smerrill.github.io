<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: drupal | Grenade Sandwich]]></title>
  <link href="http://smerrill.github.io/blog/categories/drupal/atom.xml" rel="self"/>
  <link href="http://smerrill.github.io/"/>
  <updated>2014-05-27T09:28:12-04:00</updated>
  <id>http://smerrill.github.io/</id>
  <author>
    <name><![CDATA[Steven W. Merrill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Combining tasks with Grunt]]></title>
    <link href="http://smerrill.github.io/blog/2014/05/26/combining-tasks-with-grunt/"/>
    <updated>2014-05-26T00:00:00-04:00</updated>
    <id>http://smerrill.github.io/blog/2014/05/26/combining-tasks-with-grunt</id>
    <content type="html"><![CDATA[<p>I was recently asked to help out with a few build steps for a Drupal project using <a href="http://gruntjs.com/">Grunt</a> as its build system. The project&rsquo;s <code>Gruntfile.js</code> has a <code>drush:make</code> task that utilizes <a href="https://github.com/nickpack/grunt-drush">the grunt-drush package</a> to run Drush make. This task in included in a file under the tasks directory in the main repository.</p>

<h4>tasks/drush.js</h4>

<p>```javascript
module.exports = function(grunt) {</p>

<p>  /<em>*
   * Define &ldquo;drush&rdquo; tasks.
   *
   * grunt drush:make
   *   Builds the Drush make file to the build/html directory.
   </em>/
  grunt.loadNpmTasks(&lsquo;grunt-drush&rsquo;);
  grunt.config(&lsquo;drush&rsquo;, {</p>

<pre><code>make: {
  args: ['make', '&lt;%= config.srcPaths.make %&gt;'],
  dest: '&lt;%= config.buildPaths.html %&gt;'
}
</code></pre>

<p>  });
};
```</p>

<p>You can see that the task contains a few instances of <em>variable interpolation</em>, such as <code>&lt;%= config.srcPaths.make %&gt;</code>. By convention, the values of these variables go in a file called <code>Gruntconfig.json</code> file and are set using the <code>grunt.initConfig</code> method. In addition, the configuration for the <strong>default</strong> task lives in a file called <code>Gruntfile.js</code>. I have put trimmed examples of each below.</p>

<h4>Gruntfile.js</h4>

<p>```javascript
module.exports = function(grunt) {</p>

<p>  // Initialize global configuration variables.
  var config = grunt.file.readJSON(&lsquo;Gruntconfig.json&rsquo;);
  grunt.initConfig({</p>

<pre><code>config: config
</code></pre>

<p>  });</p>

<p>  // Load all included tasks.
  grunt.loadTasks(__dirname + &lsquo;/tasks&rsquo;);</p>

<p>  // Define the default task to fully build and configure the project.
  var tasksDefault = [</p>

<pre><code>'clean:default',
'mkdir:init',
'drush:make',
</code></pre>

<p>  ];
  grunt.registerTask(&lsquo;default&rsquo;, tasksDefault);
};
```</p>

<h4>Gruntconfig.json</h4>

<p>```javascript
{
  &ldquo;srcPaths&rdquo;: {</p>

<pre><code>"make": "src/mti_cms.make"
</code></pre>

<p>  },
  &ldquo;buildPaths&rdquo;: {</p>

<pre><code>"build": "build",
"html": "build/html"
</code></pre>

<p>  }
}
```</p>

<p>As you can see, the project&rsquo;s <code>Gruntfile.js</code> also has a <code>clean:default</code> task to remove the built site and a <code>mkdir:init</code> task to make the build/html directory, and the three tasks are combined with <code>grunt.registerTask</code> to make the <strong>default</strong> task which will be run when you invoke <code>grunt</code> with no arguments.</p>

<h2>A small change</h2>

<p>In Phase2&rsquo;s standard project build setup using <a href="http://www.phing.info/">Phing</a>, we have a task that will run <a href="http://drush.ws/docs/make.txt">drush make</a> when the make file&rsquo;s modified time is newer than the built site. This allows a user to invoke the build tool and only spend the time doing a <code>drush make</code> if the Makefile has indeed changed.</p>

<p>The setup needed to do this in Phing is configured in XML: if an index.php file exists and it is newer than the Makefile, don&rsquo;t run <code>drush make</code>. Otherwise, delete the built site and run <code>drush make</code>. The necessary configuration to do this in a Phing build.xml is below.</p>

<h4>build.xml</h4>

<p>```xml
<target name="-drush-make-uptodate" depends="init" hidden="true">
  <if></p>

<pre><code>&lt;available file="${html}/index.php" /&gt;
&lt;then&gt;
  &lt;uptodate property="drush.makefile.uptodate"
    targetfile="${html}/index.php" srcfile="${drush.makefile}" /&gt;
&lt;/then&gt;
</code></pre>

<p>  </if>
</target></p>

<!-- Use drush make to build (or rebuild) the docroot -->


<p><target name="drush-make" depends="-drush-make-uptodate, init"
  hidden="true" unless="drush.makefile.uptodate">
  <if></p>

<pre><code>&lt;available file="${html}"/&gt;
&lt;then&gt;
  &lt;echo level="info" message="Rebuilding ${html}."/&gt;
  &lt;delete dir="${html}" failonerror="true"/&gt;
&lt;/then&gt;
</code></pre>

<p>  </if></p>

<p>  <exec executable="drush" checkreturn="true" passthru="true" level="info"></p>

<pre><code>&lt;arg value="make"/&gt;
&lt;arg value="${drush.makefile}"/&gt;
&lt;arg value="${html}"/&gt;
</code></pre>

<p>  </exec>
</target>
```</p>

<p>You&rsquo;ll note that Phing also uses variable interpolation. The syntax, <code>${html}</code>, is similar to regular PHP string interpolation. By convention, parameters for a Phing build live in a <code>build.properties</code> file.</p>

<h2>A newer grunt</h2>

<p><a href="https://github.com/tschaub/grunt-newer">The grunt-newer plugin</a> appears to be the proper way to handle this. It creates a new task prefixed with <code>newer:</code> to any other defined tasks. If your task has a <code>src</code> and <code>dest</code> parameter, it will check that <code>src</code> is newer than <code>dest</code> before running the task.</p>

<p>In my first quick testing, I added a spurious src parameter to the <code>drush:make</code> task and then invoked the <code>newer:drush:make</code> task.</p>

<p>```javascript
grunt.config(&lsquo;drush&rsquo;, {
  make: {</p>

<pre><code>args: ['make', '&lt;%= config.srcPaths.make %&gt;'],
src: '&lt;%= config.srcPaths.make %&gt;',
dest: '&lt;%= config.buildPaths.html %&gt;'
</code></pre>

<p>  }
});
```</p>

<p>That modification worked properly in concert with <code>grunt-newer</code> (and the <code>drush</code> task from <code>grunt-drush</code> task didn&rsquo;t complain about the extra <code>src</code> parameter,) but I still also needed to conditionally run the <code>clean:default</code> and <code>mkdir:init</code> only if the Makefile was newer than the built site.</p>

<h2>Synchronized grunting</h2>

<p>The answer turned out to be to create a composite task using <code>grunt.registerTask</code> and <code>grunt.task.run</code> that combined the three tasks existing tasks and then use the <code>grunt-newer</code> version of that task. The solution looked much like the following.</p>

<p><code>javascript
grunt.registerTask('drushmake', 'Delete and create the site folder, run Drush make.', function() {
  grunt.task.run('clean:default', 'mkdir:init', 'drush:make');
});
</code></p>

<p>I could then invoke <code>newer:drushmake:default</code> in my <code>Gruntfile.js</code> and only delete and rebuild the site when there were changes to the Makefile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Drupal with Ghosts and Gherkins at DrupalCampNJ]]></title>
    <link href="http://smerrill.github.io/blog/2013/02/04/testing-drupal-with-ghosts-and-gherkins-at-drupalcampnj/"/>
    <updated>2013-02-04T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/2013/02/04/testing-drupal-with-ghosts-and-gherkins-at-drupalcampnj</id>
    <content type="html"><![CDATA[<p>This weekend marked the second annual <a href="http://www.drupalcampnj.org/" target="_">DrupalCamp New Jersey</a> at beautiful Princeton University.</p>


<p></p></p>

<p>I was happy to fill in when a presenter dropped out and presented a session called "Testing Drupal with Ghosts and Gherkins". In this presentation, I talked about how both CasperJS or Behat could be brought to bear to test a Drupal application and gave some demos of each. The slides are embedded below.</p>


<p></p></p>

<!--more-->




<p><iframe src="http://www.slideshare.net/slideshow/embed_code/16322739?rel=0" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe><br /></p>


<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/Phase2Technology/testing-withghostsandgherkins" title="Testing Drupal with Ghosts and Gherkin" target="_blank">Testing Drupal with Ghosts and Gherkin</a> </strong> from <strong><a href="http://www.slideshare.net/Phase2Technology" target="_blank">Phase2 Technology</a></strong> </div>


<br />


<p></p></p>

<p>Here are some links to the items demoed in the presentation so that you can give them a shot on your own sites.</p>


<p></p></p>

<p>Information about CasperJS is available at its website, <a href="http://casperjs.org/">casperjs.org</a>. You can read more about CasperJS's parent project, PhantomJS, at <a href="http://phantomjs.org/">phantomjs.org</a>.</p>


<p></p></p>

<p>The sample CasperJS scripts adapted from our Testing with Friendly Ghosts presentation are available on GitHub at <a href="https://github.com/ericduran/friendly-ghosts-examples">github.com/ericduran/friendly-ghosts-examples</a>.</p>


<p></p></p>

<p>Similarly, documentation for both Behat and the Mink browser-testing extension is available at <a href="http://behat.org/">behat.org</a>. </p>


<p></p></p>

<p>If you'd like to try out a sample project that uses Behat and Mink and one custom Mink step definition to test some sample assertions on the Phase2 website, it's on GitHub at <a href="https://github.com/phase2/behat-phase2tech/">github.com/phase2/behat-phase2tech/</a>.</p>


<p></p></p>

<p>Finally, our set of Drupal-based Behat and Mink step definitions are released as Open Source on GitHub at <a href="https://github.com/phase2/behat-drupal-extension">github.com/phase2/behat-drupal-extension</a>.</p>


<p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Drupal with Ghosts and Gherkins at DrupalCampNJ]]></title>
    <link href="http://smerrill.github.io/blog/2013/02/04/testing-drupal-with-ghosts-and-gherkins-at-drupalcampnj/"/>
    <updated>2013-02-04T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/2013/02/04/testing-drupal-with-ghosts-and-gherkins-at-drupalcampnj</id>
    <content type="html"><![CDATA[<p>This weekend marked the second annual <a href="http://www.drupalcampnj.org/" target="_">DrupalCamp New Jersey</a> at beautiful Princeton University.</p>


<p></p></p>

<p>I was happy to fill in when a presenter dropped out and presented a session called "Testing Drupal with Ghosts and Gherkins". In this presentation, I talked about how both CasperJS or Behat could be brought to bear to test a Drupal application and gave some demos of each. The slides are embedded below.</p>


<p></p></p>

<!--more-->




<p><iframe src="http://www.slideshare.net/slideshow/embed_code/16322739?rel=0" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe><br /></p>


<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/Phase2Technology/testing-withghostsandgherkins" title="Testing Drupal with Ghosts and Gherkin" target="_blank">Testing Drupal with Ghosts and Gherkin</a> </strong> from <strong><a href="http://www.slideshare.net/Phase2Technology" target="_blank">Phase2 Technology</a></strong> </div>


<br />


<p></p></p>

<p>Here are some links to the items demoed in the presentation so that you can give them a shot on your own sites.</p>


<p></p></p>

<p>Information about CasperJS is available at its website, <a href="http://casperjs.org/">casperjs.org</a>. You can read more about CasperJS's parent project, PhantomJS, at <a href="http://phantomjs.org/">phantomjs.org</a>.</p>


<p></p></p>

<p>The sample CasperJS scripts adapted from our Testing with Friendly Ghosts presentation are available on GitHub at <a href="https://github.com/ericduran/friendly-ghosts-examples">github.com/ericduran/friendly-ghosts-examples</a>.</p>


<p></p></p>

<p>Similarly, documentation for both Behat and the Mink browser-testing extension is available at <a href="http://behat.org/">behat.org</a>. </p>


<p></p></p>

<p>If you'd like to try out a sample project that uses Behat and Mink and one custom Mink step definition to test some sample assertions on the Phase2 website, it's on GitHub at <a href="https://github.com/phase2/behat-phase2tech/">github.com/phase2/behat-phase2tech/</a>.</p>


<p></p></p>

<p>Finally, our set of Drupal-based Behat and Mink step definitions are released as Open Source on GitHub at <a href="https://github.com/phase2/behat-drupal-extension">github.com/phase2/behat-drupal-extension</a>.</p>


<p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access PHP, MySQL, jQuery, and Drupal documentation offline on your Mac with Dash]]></title>
    <link href="http://smerrill.github.io/blog/2012/05/31/access-php-mysql-jquery-and-drupal-documentation-offline-on-your-mac-with-dash/"/>
    <updated>2012-05-31T00:00:00-04:00</updated>
    <id>http://smerrill.github.io/blog/2012/05/31/access-php-mysql-jquery-and-drupal-documentation-offline-on-your-mac-with-dash</id>
    <content type="html"><![CDATA[<p>Wouldn't it be great if there was an easy way to access php.net or other documentation offline or on a plane?</p>


<p></p></p>

<p><strong>UPDATE:</strong> Sadly, as this blog post went to press, two important updates came out that change the usefulness of this blog post. Dash is now ad-supported, and secondly, it ships with a Drupal DocSet available for download, so that's one fewer step you have to perform to have all the docs that matter to you in Dash.</p>


<p></p></p>

<!--more-->




<p>There's a free as in beer application called Dash (available on the Mac App Store at <a href="http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12" title="http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12">http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12</a>) available for Mac OS X. Dash is a nice-looking documentation browser featuring several useful features, such as the ability to query it with a custom URL string (dash://YOURQUERY), which lends itself for use in tools like Alfred.</p>


<p></p></p>

<p>Dash can also download additional documentation sets for many open source technologies, including MySQL, PHP, and jQuery. It can be handy to search through the latest PHP API documentation no matter what kind of connection you're on, like so:</p>


<br />


<p><a href="https://skitch.com/00sven/87u7b/dash-documentation"><img src="https://img.skitch.com/20120530-ttupxms7g3b48xep9yu3qk8rs2.medium.jpg" alt="Dash - Documentation" /></a></p></p>

<p>In addition, Dash also has the ability to browse any API documentation that you have installed through XCode onto your system. (In fact, any files in DocSet format that are located inside the ~/Library/Developer/Shared/Documentation/DocSets directory can be read by Dash.)</p>


<p></p></p>

<p>In addition to the freely available DocSets that are available for major open-source technologies, it's easy to make your own DocSets using doxygen. I went ahead and made a DocSet for Drupal 7.x using doxygen. Not every method that's available at api.drupal.org is here, but it's a great start, especially if you want a single offline app where you can query offline documentation.</p>


<p></p></p>

<p>To start using the Drupal DocSet, download the .tgz file from <a href="https://github.com/phase2/drupal-docset/zipball/master" title="https://github.com/phase2/drupal-docset/zipball/master">https://github.com/phase2/drupal-docset/zipball/master</a>. To use it:</p>


<p></p></p>

<ol>
<li>Unzip the file</li>
<li>Move org.drupal.docset to ~/Library/Developer/Shared/Documentation/DocSets/</li>
<li>Launch Dash and start searching, like so.</li><br />
</ol>


<br />


<p><a href="https://skitch.com/00sven/87u44/dash-documentation"><img src="https://img.skitch.com/20120530-rrgw89tfht2g7ie3ejys98xssr.medium.jpg" alt="Dash - Documentation" /></a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access PHP, MySQL, jQuery, and Drupal documentation offline on your Mac with Dash]]></title>
    <link href="http://smerrill.github.io/blog/2012/05/31/access-php-mysql-jquery-and-drupal-documentation-offline-on-your-mac-with-dash/"/>
    <updated>2012-05-31T00:00:00-04:00</updated>
    <id>http://smerrill.github.io/blog/2012/05/31/access-php-mysql-jquery-and-drupal-documentation-offline-on-your-mac-with-dash</id>
    <content type="html"><![CDATA[<p>Wouldn't it be great if there was an easy way to access php.net or other documentation offline or on a plane?</p>


<p></p></p>

<p><strong>UPDATE:</strong> Sadly, as this blog post went to press, two important updates came out that change the usefulness of this blog post. Dash is now ad-supported, and secondly, it ships with a Drupal DocSet available for download, so that's one fewer step you have to perform to have all the docs that matter to you in Dash.</p>


<p></p></p>

<!--more-->




<p>There's a free as in beer application called Dash (available on the Mac App Store at <a href="http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12" title="http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12">http://itunes.apple.com/us/app/dash/id458034879?ls=1&mt=12</a>) available for Mac OS X. Dash is a nice-looking documentation browser featuring several useful features, such as the ability to query it with a custom URL string (dash://YOURQUERY), which lends itself for use in tools like Alfred.</p>


<p></p></p>

<p>Dash can also download additional documentation sets for many open source technologies, including MySQL, PHP, and jQuery. It can be handy to search through the latest PHP API documentation no matter what kind of connection you're on, like so:</p>


<br />


<p><a href="https://skitch.com/00sven/87u7b/dash-documentation"><img src="https://img.skitch.com/20120530-ttupxms7g3b48xep9yu3qk8rs2.medium.jpg" alt="Dash - Documentation" /></a></p></p>

<p>In addition, Dash also has the ability to browse any API documentation that you have installed through XCode onto your system. (In fact, any files in DocSet format that are located inside the ~/Library/Developer/Shared/Documentation/DocSets directory can be read by Dash.)</p>


<p></p></p>

<p>In addition to the freely available DocSets that are available for major open-source technologies, it's easy to make your own DocSets using doxygen. I went ahead and made a DocSet for Drupal 7.x using doxygen. Not every method that's available at api.drupal.org is here, but it's a great start, especially if you want a single offline app where you can query offline documentation.</p>


<p></p></p>

<p>To start using the Drupal DocSet, download the .tgz file from <a href="https://github.com/phase2/drupal-docset/zipball/master" title="https://github.com/phase2/drupal-docset/zipball/master">https://github.com/phase2/drupal-docset/zipball/master</a>. To use it:</p>


<p></p></p>

<ol>
<li>Unzip the file</li>
<li>Move org.drupal.docset to ~/Library/Developer/Shared/Documentation/DocSets/</li>
<li>Launch Dash and start searching, like so.</li><br />
</ol>


<br />


<p><a href="https://skitch.com/00sven/87u44/dash-documentation"><img src="https://img.skitch.com/20120530-rrgw89tfht2g7ie3ejys98xssr.medium.jpg" alt="Dash - Documentation" /></a></p></p>
]]></content>
  </entry>
  
</feed>
