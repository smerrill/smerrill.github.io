<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | Grenade Sandwich]]></title>
  <link href="http://smerrill.github.io/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://smerrill.github.io/"/>
  <updated>2014-05-26T21:41:33-04:00</updated>
  <id>http://smerrill.github.io/</id>
  <author>
    <name><![CDATA[Steven W. Merrill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Your L(ion)AMP Stack]]></title>
    <link href="http://smerrill.github.io/blog/2014/01/01/setting-up-your-lionamp-stack/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/2014/01/01/setting-up-your-lionamp-stack</id>
    <content type="html"><![CDATA[<ol>
<li>Install XCode (or just gcc)</li>
<li>Install Homebrew</li>
<li>Brew up some software</li>
<li>Make the LAMP brighter</li>
</ol>


<!-- break -->


<h2>Install XCode (or just gcc)</h2>

<h2>Install Homebrew</h2>

<h2>Brew up some software</h2>

<h2>Make the LAMP brighter</h2>

<h3>Get MySQL configured</h3>

<p>Edit /etc/my.cnf and put the following in:</p>

<p>```[mysql]</p>

<h1>Packets.</h1>

<p>max_allowed_packet=16m</p>

<p>[mysqld]</p>

<h1>Packets.</h1>

<p>max_allowed_packet=16m</p>

<h1>Wait timeouts.</h1>

<p>innodb_lock_wait_timeout=600
wait_timeout=600
connect_timeout=10</p>

<h1>Set this as high as possible. On a dedicated server, 60% &ndash; 80% of machine RAM.</h1>

<p>innodb_buffer_pool_size=512m</p>

<h1>Set this to the number of logical cores you have on the database server.</h1>

<p>innodb_thread_concurrency=4</p>

<h1>Turn this on dynamically with a Jenkins job.</h1>

<p>slow_query_log=OFF</p>

<h1>Max number of connections allowed.</h1>

<p>max_connections=400</p>

<h1>Don&rsquo;t run out of file descriptors!</h1>

<p>open_files_limit=32768</p>

<h1>If you set the query cache too high, your server risks severly slowing down and taking tens of seconds after an INSERT due to query cache mutex contention.</h1>

<p>query_cache_limit=1M
query_cache_size=32M</p>

<h1>This allows a long-running query to not hit the network for a while and yet not be killed by MySQL.</h1>

<p>net_read_timeout=3600
net_write_timeout=3600</p>

<h1>This only works with Percona but allows you to pare down which slow queries go to the log.</h1>

<h1>log_slow_filter=tmp_table_on_disk,filesort_on_disk</h1>

<h1>Use InnoDB as the default engine.</h1>

<h1>default_storage_engine = InnoDB</h1>

<h1>default_character_set = utf8</h1>

<h1>collation_server = utf8_general_ci</h1>

<h1>character_set_server = utf8</h1>

<h1>Smaller InnoDB files mean less disk I/O when a new one is created.</h1>

<p>innodb_log_file_size=512m
innodb_log_buffer_size=64m
innodb_file_per_table</p>

<h1>Speed up write performance significantly. You risk losing at most 1 or 2 seconds of data in event of a power loss or other catastrophic failure.</h1>

<p>innodb_flush_log_at_trx_commit=0</p>

<h1>Max temp table size in RAM &ndash; larger can be set in application with a per-session SET.</h1>

<p>max_heap_table_size=64m
tmp_table_size=64m</p>

<h1>Per-session mem settings for sorts, joins, order by etc</h1>

<p>join_buffer_size=2m
sort_buffer_size=2m
read_rnd_buffer_size=2m
read_buffer_size=2m</p>

<h1>Block size inside query cache &ndash; reduce pruning</h1>

<p>query_cache_min_res_unit=1024```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Your L(ion)AMP Stack]]></title>
    <link href="http://smerrill.github.io/blog/2014/01/01/setting-up-a-lionamp-stack/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/2014/01/01/setting-up-a-lionamp-stack</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you have upgraded to OS X Lion and you want to set it up to do web development. (I&rsquo;ll assume that you want to do Drupal web development, but this will get you set up for any LAMP application.) There will be a couple of tweaks you&rsquo;ll want to make to get your Lion purring.</p>

<p>In short, here&rsquo;s what you will need to do:</p>

<ol>
<li>Install XCode (or gcc)</li>
<li>Install Homebrew</li>
<li>Brew Some Software</li>
<li>Tune Apache</li>
</ol>


<!-- break -->


<h2>Install XCode (or gcc)</h2>

<h2>Install Homebrew</h2>

<h2>Brew Some Software</h2>

<h2>Tune Apache</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A PSA: Lion and .local Domain Names]]></title>
    <link href="http://smerrill.github.io/blog/2011/09/08/psa-lion-and-local-domain-names/"/>
    <updated>2011-09-08T00:00:00-04:00</updated>
    <id>http://smerrill.github.io/blog/2011/09/08/psa-lion-and-local-domain-names</id>
    <content type="html"><![CDATA[<p>Do you enjoy your hair? Would you prefer not to pull it out while waiting for your local Apache server on Mac OS X to deliver a page to you?</p>

<p>If you use Mac OS X Lion and have development sites set up at .local addresses, you should immediately move them to any other fake TLD. The .local address space is resolved for Bonjour and as a result any request to a .local name will not hit /etc/hosts first, but will search for Bonjour hosts first.</p>

<p>I found <a href="http://stackoverflow.com/questions/6841421/mac-osx-lion-dns-lookup-order">this Stack Exchange question</a> on the subject tonight after getting frustrated with <strong>curl</strong> seemingly hanging for several seconds on each request.</p>

<p>Instead, I switched all of my local dev sites from $DOMAIN.local to $DOMAIN.dev. The results are staggering.</p>

<!--more-->


<p>Since switching all my development sites to end in .dev, requests for them happen several orders of magnitude faster, which is a welcome change. Here are two examples of an Apache 404 page (such that the DNS resolution time is the only appreciable time spent in delivering a response to <strong>curl</strong>.)</p>

<p><div class="highlight"><pre><code class="text"> ┌┤smerrill@Tinier-Shinier:6 [Sep 07 23:43:35] ~
 └╼ time curl &lt;a href=&quot;http://whatever.local/&quot;&gt;http://whatever.local/&lt;/a&gt; &gt; /dev/null&lt;/p&gt;

&lt;p&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                             Dload  Upload   Total   Spent    Left  Speed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100    72  100    72    0     0   1217      0 &amp;mdash;:&amp;mdash;:&amp;mdash; &amp;mdash;:&amp;mdash;:&amp;mdash; &amp;mdash;:&amp;mdash;:&amp;mdash;  1250&lt;/p&gt;

&lt;p&gt;real    0m5.011s
user    0m0.006s
sys     0m0.003s&lt;/p&gt;

&lt;p&gt; ┌┤smerrill@Tinier-Shinier:6 [Sep 07 23:43:46] ~
 └╼ time curl &lt;a href=&quot;http://whatever.dev/&quot;&gt;http://whatever.dev/&lt;/a&gt; &gt; /dev/null
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                             Dload  Upload   Total   Spent    Left  Speed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100    72  100    72    0     0   1412      0 &amp;mdash;:&amp;mdash;:&amp;mdash; &amp;mdash;:&amp;mdash;:&amp;mdash; &amp;mdash;:&amp;mdash;:&amp;mdash;  1440&lt;/p&gt;

&lt;p&gt;real    0m0.060s
user    0m0.007s
sys     0m0.004s
</code></pre></div></p>

<p>That&rsquo;s right &ndash; the request goes from a lag of almost 5 seconds to finishing in the blink of an eye. A coworker reported his times going from 12 seconds to less than a tenth of a second. It&rsquo;s amazing what a difference such a small change in DNS can make.</p>

<p>I hope this speeds up your local web development!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Need for Speed]]></title>
    <link href="http://smerrill.github.io/blog/steven/2009/06/27/need-speed/"/>
    <updated>2009-06-27T00:00:00-04:00</updated>
    <id>http://smerrill.github.io/blog/steven/2009/06/27/need-for-speed</id>
    <content type="html"><![CDATA[<p>I've been doing some pretty exciting things recently with website performance. I always disliked doing IT work in the past, but the challenge of setting a server up to be able to withstand crushing traffic is now quite intriguing to me.</p>


<!--more-->


<p>To wit, here's a funny moment from a recent experiment. I was using incrond to run a script to minify some JavaScript whenever Drupal created a new JS file. Unfortunately, my script also created a new JS file (a backup, unminified copy,) and the protection I put into place wasn't quite working correctly. I think the image below speaks for itself.</p>




<p><a href="http://www.flickr.com/photos/00sven/3666239762" title="A Fluke&#039;s Progress" class="flickr-photo-img"><img src="http://farm4.static.flickr.com/3352/3666239762_9a642bb3a4.jpg" alt="A Fluke&#039;s Progress" title="A Fluke&#039;s Progress"  class=" flickr-photo-img" height="344" width="500" /></a></p>

]]></content>
  </entry>
  
</feed>
