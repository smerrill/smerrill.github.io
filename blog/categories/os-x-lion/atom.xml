<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os x lion | Grenade Sandwich]]></title>
  <link href="http://smerrill.github.io/blog/categories/os-x-lion/atom.xml" rel="self"/>
  <link href="http://smerrill.github.io/"/>
  <updated>2014-05-27T09:21:44-04:00</updated>
  <id>http://smerrill.github.io/</id>
  <author>
    <name><![CDATA[Steven W. Merrill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Your L(ion)AMP Stack]]></title>
    <link href="http://smerrill.github.io/blog/2014/01/01/setting-up-your-lionamp-stack/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/2014/01/01/setting-up-your-lionamp-stack</id>
    <content type="html"><![CDATA[<ol>
<li>Install XCode (or just gcc)</li>
<li>Install Homebrew</li>
<li>Brew up some software</li>
<li>Make the LAMP brighter</li>
</ol>


<!-- break -->


<h2>Install XCode (or just gcc)</h2>

<h2>Install Homebrew</h2>

<h2>Brew up some software</h2>

<h2>Make the LAMP brighter</h2>

<h3>Get MySQL configured</h3>

<p>Edit /etc/my.cnf and put the following in:</p>

<p>```[mysql]</p>

<h1>Packets.</h1>

<p>max_allowed_packet=16m</p>

<p>[mysqld]</p>

<h1>Packets.</h1>

<p>max_allowed_packet=16m</p>

<h1>Wait timeouts.</h1>

<p>innodb_lock_wait_timeout=600
wait_timeout=600
connect_timeout=10</p>

<h1>Set this as high as possible. On a dedicated server, 60% &ndash; 80% of machine RAM.</h1>

<p>innodb_buffer_pool_size=512m</p>

<h1>Set this to the number of logical cores you have on the database server.</h1>

<p>innodb_thread_concurrency=4</p>

<h1>Turn this on dynamically with a Jenkins job.</h1>

<p>slow_query_log=OFF</p>

<h1>Max number of connections allowed.</h1>

<p>max_connections=400</p>

<h1>Don&rsquo;t run out of file descriptors!</h1>

<p>open_files_limit=32768</p>

<h1>If you set the query cache too high, your server risks severly slowing down and taking tens of seconds after an INSERT due to query cache mutex contention.</h1>

<p>query_cache_limit=1M
query_cache_size=32M</p>

<h1>This allows a long-running query to not hit the network for a while and yet not be killed by MySQL.</h1>

<p>net_read_timeout=3600
net_write_timeout=3600</p>

<h1>This only works with Percona but allows you to pare down which slow queries go to the log.</h1>

<h1>log_slow_filter=tmp_table_on_disk,filesort_on_disk</h1>

<h1>Use InnoDB as the default engine.</h1>

<h1>default_storage_engine = InnoDB</h1>

<h1>default_character_set = utf8</h1>

<h1>collation_server = utf8_general_ci</h1>

<h1>character_set_server = utf8</h1>

<h1>Smaller InnoDB files mean less disk I/O when a new one is created.</h1>

<p>innodb_log_file_size=512m
innodb_log_buffer_size=64m
innodb_file_per_table</p>

<h1>Speed up write performance significantly. You risk losing at most 1 or 2 seconds of data in event of a power loss or other catastrophic failure.</h1>

<p>innodb_flush_log_at_trx_commit=0</p>

<h1>Max temp table size in RAM &ndash; larger can be set in application with a per-session SET.</h1>

<p>max_heap_table_size=64m
tmp_table_size=64m</p>

<h1>Per-session mem settings for sorts, joins, order by etc</h1>

<p>join_buffer_size=2m
sort_buffer_size=2m
read_rnd_buffer_size=2m
read_buffer_size=2m</p>

<h1>Block size inside query cache &ndash; reduce pruning</h1>

<p>query_cache_min_res_unit=1024```</p>
]]></content>
  </entry>
  
</feed>
