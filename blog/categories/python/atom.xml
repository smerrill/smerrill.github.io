<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Grenade Sandwich]]></title>
  <link href="http://smerrill.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://smerrill.github.io/"/>
  <updated>2014-05-25T11:05:14-04:00</updated>
  <id>http://smerrill.github.io/</id>
  <author>
    <name><![CDATA[Steven W. Merrill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python to Scala 2.7: Check Your Spelling]]></title>
    <link href="http://smerrill.github.io/blog/steven/2009/11/28/python-scala-27-check-your-spelling/"/>
    <updated>2009-11-27T00:00:00-05:00</updated>
    <id>http://smerrill.github.io/blog/steven/2009/11/28/python-to-scala-2-7-check-your-spelling</id>
    <content type="html"><![CDATA[<p><a href="http://smerrill.github.io/node/10">Last time out</a>, I talked about the benefits of <a href="http://www.scala-lang.org/">Scala</a>, and why I'm looking at Scala and <a href="http://www.liftweb.net/">Lift</a>.</p>




<p>In that spirit, I spent some time last weekend converting Peter Norvig's <a href="http://norvig.com/spell-correct.html">simple Python spell-checker</a> to Scala.  I didn't do this conversion alone; I got some great answers from <a href="http://dcsobral.blogspot.com/">Daniel Sobral</a>, <a href="http://www.codecommit.com/blog/">Daniel Spiewak</a> and finally <A href="http://dwins.wordpress.com/">David Winslow</a> on <a href="http://stackoverflow.com/questions/1780459/how-can-i-approximate-pythons-or-operator-for-set-comparison-in-scala">Stack Overflow</a>. David provided the answer I needed for the best way to implement the matching function in Scala 2.7.</p>


<!--more-->


<p>Here's Peter Norvig's 21 lines (not counting blank lines) of Python 2.5 code, for comparison.</p>


<p><div class="highlight"><pre><code class="python"><span class="kn">import</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">collections</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span> <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="n">a</span><span class="o">-</span><span class="n">z</span><span class="p">]</span><span class="o">+&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">features</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">features</span><span class="p">:</span>
    <span class="n">model</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">return</span> <span class="n">model</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NWORDS</span> <span class="o">=</span> <span class="n">train</span><span class="p">(</span><span class="n">words</span><span class="p">(</span><span class="nb">file</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">big</span><span class="o">.</span><span class="n">txt</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">read</span><span class="p">()))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">alphabet</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">abcdefghijklmnopqrstuvwxyz</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">edits1</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
   <span class="n">s</span> <span class="o">=</span> <span class="p">[(</span><span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">],</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
   <span class="n">deletes</span>    <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">s</span> <span class="k">if</span> <span class="n">b</span><span class="p">]</span>
   <span class="n">transposes</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">s</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">]</span>
   <span class="n">replaces</span>   <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">s</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">alphabet</span> <span class="k">if</span> <span class="n">b</span><span class="p">]</span>
   <span class="n">inserts</span>    <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">b</span>     <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">s</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">alphabet</span><span class="p">]</span>
   <span class="k">return</span> <span class="nb">set</span><span class="p">(</span><span class="n">deletes</span> <span class="o">+</span> <span class="n">transposes</span> <span class="o">+</span> <span class="n">replaces</span> <span class="o">+</span> <span class="n">inserts</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">known_edits2</span><span class="p">(</span><span class="n">word</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nb">set</span><span class="p">(</span><span class="n">e2</span> <span class="k">for</span> <span class="n">e1</span> <span class="ow">in</span> <span class="n">edits1</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="k">for</span> <span class="n">e2</span> <span class="ow">in</span> <span class="n">edits1</span><span class="p">(</span><span class="n">e1</span><span class="p">)</span> <span class="k">if</span> <span class="n">e2</span> <span class="ow">in</span> <span class="n">NWORDS</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">known</span><span class="p">(</span><span class="n">words</span><span class="p">):</span> <span class="k">return</span> <span class="nb">set</span><span class="p">(</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">NWORDS</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">correct</span><span class="p">(</span><span class="n">word</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">candidates</span> <span class="o">=</span> <span class="n">known</span><span class="p">([</span><span class="n">word</span><span class="p">])</span> <span class="ow">or</span> <span class="n">known</span><span class="p">(</span><span class="n">edits1</span><span class="p">(</span><span class="n">word</span><span class="p">))</span> <span class="ow">or</span> <span class="n">known_edits2</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="ow">or</span> <span class="p">[</span><span class="n">word</span><span class="p">]</span>
<span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">NWORDS</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>And now, the Scala 2.7 version that I came up with. It's 24 non-whitespace lines, although the average line is longer than the Python version.</p>


<p><div class="highlight"><pre><code class="scala"><span class="k">import</span> <span class="nn">scala.io.Source</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">alphabet</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">abcdefghijklmnopqrstuvwxyz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">train</span><span class="o">(</span><span class="n">text</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;[</span><span class="kt">a-z</span><span class="o">]+&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">r</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Int</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">withDefaultValue</span> <span class="mi">1</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;{(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">a</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="nc">NWORDS</span> <span class="k">=</span> <span class="n">train</span><span class="o">(</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">big</span><span class="o">.</span><span class="n">txt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="n">getLines</span><span class="o">.</span><span class="n">mkString</span><span class="o">.</span><span class="n">toLowerCase</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">known</span><span class="o">(</span><span class="n">words</span><span class="k">:</span><span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span><span class="nc">Set</span><span class="o">.</span><span class="n">empty</span> <span class="o">++</span> <span class="o">(</span><span class="k">for</span><span class="o">(</span><span class="n">w</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">words</span> <span class="k">if</span> <span class="nc">NWORDS</span> <span class="n">contains</span> <span class="n">w</span><span class="o">)</span> <span class="k">yield</span> <span class="n">w</span><span class="o">)}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">edits1</span><span class="o">(</span><span class="n">word</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
  <span class="nc">Set</span><span class="o">.</span><span class="n">empty</span> <span class="o">++</span> <span class="c1">// The next four are deletes, transposes, replaces and inserts, respectively.</span>
  <span class="o">(</span><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="k">yield</span> <span class="o">(</span><span class="n">word</span> <span class="n">take</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="n">drop</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)))</span> <span class="o">++</span>
  <span class="o">(</span><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">1</span><span class="o">)</span> <span class="k">yield</span> <span class="o">(</span><span class="n">word</span> <span class="n">take</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="n">word</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">word</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="n">drop</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)))</span> <span class="o">++</span>
  <span class="o">(</span><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="o">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">alphabet</span><span class="o">)</span> <span class="k">yield</span> <span class="o">(</span><span class="n">word</span> <span class="n">take</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="n">drop</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)))</span> <span class="o">++</span>
  <span class="o">(</span><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="o">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">alphabet</span><span class="o">)</span> <span class="k">yield</span> <span class="o">(</span><span class="n">word</span> <span class="n">take</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="n">drop</span> <span class="n">i</span><span class="o">))</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">known_edits2</span><span class="o">(</span><span class="n">word</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span><span class="nc">Set</span><span class="o">.</span><span class="n">empty</span> <span class="o">++</span> <span class="o">(</span><span class="k">for</span>
  <span class="o">(</span><span class="n">e1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">edits1</span><span class="o">(</span><span class="n">word</span><span class="o">);</span> <span class="n">e2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">edits1</span><span class="o">(</span><span class="n">e1</span><span class="o">)</span> <span class="k">if</span> <span class="nc">NWORDS</span> <span class="n">contains</span> <span class="n">e2</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e2</span><span class="o">)}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">correct</span><span class="o">(</span><span class="n">word</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">sets</span> <span class="k">=</span> <span class="nc">List</span><span class="o">[</span><span class="kt">String</span> <span class="k">=&gt;</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]](&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">known</span><span class="o">(</span><span class="nc">Set</span><span class="o">(</span><span class="n">x</span><span class="o">)),</span> <span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">known</span><span class="o">(</span><span class="n">edits1</span><span class="o">(</span><span class="n">x</span><span class="o">)),</span> <span class="n">known_edits2</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">).</span><span class="n">elements</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">(</span><span class="n">word</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sets</span> <span class="n">find</span> <span class="o">{</span> <span class="o">!</span><span class="k">_</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">}</span> <span class="k">match</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">candidates</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">candidates</span><span class="o">.</span><span class="n">reduceLeft</span> <span class="o">{</span> <span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">if</span> <span class="o">(</span><span class="nc">NWORDS</span><span class="o">(</span><span class="n">res</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">NWORDS</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="n">res</span> <span class="k">else</span> <span class="n">n</span> <span class="o">}</span>
<span class="k">case</span> <span class="nc">None</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">word</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></p>

<p>Still, it's a pretty terse bit of code, and it works much like the Python version. Tune in a bit later for an explanation of some of the constructs at work here, and an even nicer Scala 2.8 version of the code.</p>

]]></content>
  </entry>
  
</feed>
